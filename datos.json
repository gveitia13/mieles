[{"model": "app_user.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$600000$VwR8ZwfwTHDuX9BqV3QfrI$Ayydj2gNBTAPYxzYpwf/1az8ifO2Z9FMYLbIHAA7GWc=", "last_login": "2023-06-30T04:56:19.357Z", "username": "star", "first_name": "", "last_name": "", "is_active": true, "date_joined": "2023-06-27T05:18:39.783Z", "email": "gveitia13@gmail.com", "is_superstar": true, "is_superuser": true, "is_staff": true, "groups": [], "user_permissions": []}}, {"model": "app_user.user", "pk": 16, "fields": {"password": "pbkdf2_sha256$600000$S26G8cRkyUI4RBvGyazrYo$5I5BmXirGw1iEv91mirWHZrP6ekcfAMvl7UGk4/TGys=", "last_login": "2023-06-30T05:34:29.169Z", "username": "gveitia95", "first_name": "", "last_name": "", "is_active": true, "date_joined": "2023-06-29T03:44:18.005Z", "email": "gveitia95@gmail.com", "is_superstar": false, "is_superuser": true, "is_staff": true, "groups": [], "user_permissions": []}}, {"model": "app_main.category", "pk": 3, "fields": {"name": "Comando"}}, {"model": "app_main.category", "pk": 4, "fields": {"name": "Configuraciones"}}, {"model": "app_main.category", "pk": 5, "fields": {"name": "Funcionalidad"}}, {"model": "app_main.language", "pk": 2, "fields": {"name": "Django"}}, {"model": "app_main.code", "pk": 3, "fields": {"user": 16, "category": 3, "language": 2, "title": "Export db", "code": "set PYTHONIOENCODING=utf-8 && python manage.py dumpdata --exclude auth.permission --exclude contenttypes --exclude sessions app1 app2 > datos.json", "description": "Exporta la db conservando el formato utf-8 a un archivo json"}}, {"model": "app_main.code", "pk": 4, "fields": {"user": 16, "category": 4, "language": 2, "title": "Static and media files", "code": "STATIC_URL = '/static/'\r\n\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')\r\n\r\n#settings.py\r\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\r\n\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\r\n\r\n#urls.py global\r\nif settings.DEBUG:\r\n    urlpatterns += staticfiles_urlpatterns()\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)", "description": "Configuración de los media y static files con DEBUG=True"}}, {"model": "app_main.code", "pk": 5, "fields": {"user": 16, "category": 4, "language": 2, "title": "Varibles de entorno", "code": "from environ import environ\r\n\r\n# Initialise environment variables\r\nenv = environ.Env()\r\nenviron.Env.read_env()\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nenviron.Env.read_env(os.path.join(BASE_DIR, \".env\"))", "description": "pip install django-environ"}}, {"model": "app_main.code", "pk": 6, "fields": {"user": 16, "category": 4, "language": 2, "title": "CKEDITOR_CONFIGS", "code": "CKEDITOR_CONFIGS = {\r\n    'default': {\r\n        \"skin\": \"moono-lisa\",\r\n        \"toolbar_Basic\": [[\"Source\", \"-\", \"Bold\", \"Italic\"]],\r\n        \"toolbar_Full\": [\r\n            [\r\n                \"Styles\",\r\n                \"Format\",\r\n                \"Bold\",\r\n                \"Italic\",\r\n                \"Underline\",\r\n                \"Strike\",\r\n                \"SpellChecker\",\r\n                \"Undo\",\r\n                \"Redo\",\r\n            ],\r\n            [\"Link\", \"Unlink\", \"Anchor\"],\r\n            [\"Image\", \"Flash\", \"Table\", \"HorizontalRule\"],\r\n            [\"TextColor\", \"BGColor\"],\r\n            [\"Smiley\", \"SpecialChar\"],\r\n        ],\r\n        \"toolbar\": \"Full\",\r\n        \"height\": 300,\r\n        \"width\": 'auto',\r\n        \"filebrowserWindowWidth\": 940,\r\n        \"filebrowserWindowHeight\": 725,\r\n    }\r\n}", "description": "pip install django-ckeditor\r\n\r\n#settings\r\nINSTALLED_APPS = [\r\n    ....\r\n    'ckeditor',\r\n]\r\n#models\r\nclass Category(models.Model):\r\n    description = RichTextField('Descripción')"}}, {"model": "app_main.code", "pk": 7, "fields": {"user": 16, "category": 5, "language": 2, "title": "Django-crum", "code": "MIDDLEWARE = [\r\n    ...\r\n    'crum.CurrentRequestUserMiddleware',\r\n]\r\n#usage\r\nuser = get_current_user()\r\nrequest = get_current_request()", "description": "pip install django-crum"}}, {"model": "app_main.code", "pk": 8, "fields": {"user": 16, "category": 4, "language": 2, "title": "Config básica del Jazzmin", "code": "BUSINESS_LOGO_PATH = 'admin/img/logo-sm-blue-white.png'\r\nBUSINESS_NAME = 'TechnoStar | Mieles'\r\nBUSINESS_NAME_IMG_PATH = 'admin/img/logo_lg.png'\r\nBUSINESS_BANNER = 'admin/img/banner_lg.png'\r\nBUSINESS_ICON_PATH = 'admin/img/logo-sm-blue-black.png'\r\n\r\nJAZZMIN_SETTINGS = {\r\n    \"site_brand\": BUSINESS_NAME,\r\n    \"welcome_sign\": '',\r\n    'site_icon': BUSINESS_ICON_PATH,\r\n    'site_logo': BUSINESS_LOGO_PATH,\r\n    'site_logo_classes': 'brand-image',\r\n    \"login_logo\": BUSINESS_NAME_IMG_PATH,\r\n    \"login_logo_dark\": False,\r\n    'site_header': BUSINESS_NAME,\r\n    \"custom_css\": 'admin/css/admin.css',\r\n    'copyright': 'By TechnoStar',\r\n    'custom_js': 'admin/js/admin.js',\r\n    # \"show_ui_builder\": True,\r\n    \"icons\": {\r\n        \"auth\": \"fas fa-users-cog\",\r\n        \"app_user.User\": \"fas fa-user\",\r\n        \"auth.Group\": \"fas fa-users\",\r\n    },\r\n    \"order_with_respect_to\": [\"app_main.category\", 'app_main.language'],\r\n}", "description": "pip install django-jazzmin"}}, {"model": "app_main.code", "pk": 9, "fields": {"user": 16, "category": 4, "language": 2, "title": "Config de DBs", "code": "import os\r\n\r\nimport dj_database_url\r\nimport environ\r\n\r\nenv = environ.Env()\r\nenviron.Env.read_env()\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nenviron.Env.read_env(os.path.join(BASE_DIR, \".env\"))\r\n\r\nSQLITE = {\r\n    \"default\": {\r\n        \"ENGINE\": \"django.db.backends.sqlite3\",\r\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\r\n    }\r\n}\r\n\r\nPOSTGRESQL = {\r\n    \"default\": {\r\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\r\n        \"NAME\": env(\"POSTGRESQL_NAME\"),\r\n        \"USER\": env(\"POSTGRESQL_USER\"),\r\n        \"PASSWORD\": env(\"POSTGRESQL_PASSWORD\"),\r\n        \"HOST\": env(\"POSTGRESQL_HOST\"),\r\n        \"PORT\": env(\"POSTGRESQL_PORT\"),\r\n    }\r\n}\r\n\r\nMYSQL = {\r\n    \"default\": {\r\n        \"ENGINE\": \"django.db.backends.mysql\",\r\n        \"NAME\": \"db\",\r\n        \"USER\": \"root\",\r\n        \"PASSWORD\": \"\",\r\n        \"HOST\": \"localhost\",\r\n        \"PORT\": \"3306\",\r\n        \"OPTIONS\": {\r\n            \"sql_mode\": \"traditional\",\r\n        },\r\n    }\r\n}\r\n\r\nRENDER = {\r\n    'default': dj_database_url.parse(env(\"DATABASE_URL\"))\r\n}\r\n\r\nSUPABASE = {\r\n    \"default\": {\r\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\r\n        \"NAME\": env(\"SUP_NAME\"),\r\n        \"USER\": env(\"SUP_USER\"),\r\n        \"PASSWORD\": env(\"SUP_PASSWORD\"),\r\n        \"HOST\": env(\"SUP_HOST\"),\r\n        \"PORT\": env(\"SUP_PORT\"),\r\n    }\r\n}", "description": "#mysql\r\npip install mysqlclient\r\n#postgresql\r\npip install psycopg2-binary\r\n#Render\r\npip install dj-database-url"}}, {"model": "app_main.code", "pk": 10, "fields": {"user": 16, "category": 4, "language": 2, "title": "Config Email", "code": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\nEMAIL_HOST = env('EMAIL_HOST')\r\nEMAIL_USE_TLS = env('EMAIL_USE_TLS')\r\nEMAIL_PORT = env('EMAIL_PORT')\r\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\r\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')", "description": "crear archivo .env con las variables correspondientes"}}, {"model": "app_main.code", "pk": 11, "fields": {"user": 16, "category": 5, "language": 2, "title": "Autenticar con username and email", "code": "#backends.py\r\nfrom django.contrib.auth import get_user_model\r\nfrom django.contrib.auth.backends import ModelBackend\r\n\r\nUserModel = get_user_model()\r\n\r\nclass EmailOrUsernameModelBackend(ModelBackend):\r\n    def authenticate(self, request, username=None, password=None, **kwargs):\r\n        try:\r\n            user = UserModel.objects.get(email=username)\r\n        except UserModel.DoesNotExist:\r\n            try:\r\n                user = UserModel.objects.get(username=username)\r\n            except UserModel.DoesNotExist:\r\n                user = None\r\n        if user and user.check_password(password):\r\n            return user\r\n\r\n#settings.py\r\nAUTHENTICATION_BACKENDS = [\r\n    'app_account.backends.EmailOrUsernameModelBackend',\r\n    'django.contrib.auth.backends.ModelBackend',\r\n]", "description": "Permite autenticarse usando username o email, la tiza"}}, {"model": "app_main.code", "pk": 12, "fields": {"user": 16, "category": 5, "language": 2, "title": "Enviar email usando template", "code": "def create_mail(to, subject, template_name, context, attached_file=None):\r\n    from django.template.loader import get_template\r\n    template = get_template(template_name)\r\n    content = template.render(context)\r\n\r\n    from django.core.mail import EmailMultiAlternatives\r\n    message = EmailMultiAlternatives(\r\n        subject=subject,\r\n        body='',\r\n        from_email=settings.EMAIL_HOST_USER,\r\n        to=[to],\r\n        cc=[]\r\n    )\r\n    message.attach_alternative(content, 'text/html')\r\n    if attached_file:\r\n        message.attach_file(attached_file)\r\n    return message\r\n\r\n\r\n# mail = create_mail('pasar parametros')\r\n# mail.send(fail_silently=False)", "description": "#Ejemplo usando signals asincrono###\r\n\r\nimport threading\r\n\r\nfrom crum import get_current_request\r\nfrom django.contrib.sites.shortcuts import get_current_site\r\nfrom django.db.models.signals import post_save\r\nfrom django.dispatch import receiver\r\nfrom django.utils.encoding import force_bytes\r\nfrom django.utils.http import urlsafe_base64_encode\r\n\r\nfrom apps.client.models import Subscriptor\r\nfrom apps.core.models import Notice, Config\r\nfrom apps.utils import create_mail, get_host_url\r\n\r\n\r\ndef async_email(instance, request):\r\n    subscriptors = Subscriptor.objects.all()\r\n    emails = [usuario.email for usuario in subscriptors]\r\n\r\n    current_site = get_current_site(request)\r\n    subject = 'Nueva Noticia ' + current_site.domain\r\n    host = get_host_url(request)\r\n    cfg = Config.objects.first() if Config.objects.exists() else None\r\n    for email in emails:\r\n        image_path = None\r\n        if instance.photo:\r\n            image_path = instance.photo.path\r\n        mail = create_mail(email, subject, 'core/mails/notice_mail.html', {\r\n            'host': host,\r\n            \"domain\": current_site.domain,\r\n            \"uid\": urlsafe_base64_encode(force_bytes(email)),\r\n            'cfg': cfg,\r\n            'notice': instance,\r\n        }, None)\r\n\r\n        mail.send(fail_silently=False)\r\n        print('Se envió una noticia')\r\n\r\n\r\n@receiver(post_save, sender=Notice)\r\ndef send_notice_email(sender, instance: Notice, created, **kwargs):\r\n    if created:\r\n        request = get_current_request()\r\n        thread = threading.Thread(target=async_email, args=(instance, request))\r\n        thread.start()"}}, {"model": "app_main.code", "pk": 13, "fields": {"user": 16, "category": 5, "language": 2, "title": "Custom validators en models", "code": "def validate_only_numbers(value):\r\n    if not value.isdigit():\r\n        from django.core.exceptions import ValidationError\r\n        raise ValidationError('Este campo solo acepta números.')", "description": "Validator perzonalidao para un campo de un modelo"}}, {"model": "app_main.code", "pk": 14, "fields": {"user": 16, "category": 5, "language": 2, "title": "App para register and login", "code": "git clone https://github.com/gveitia13/app_account.git", "description": "leerse el readme"}}]